import os
class minted:
    def __init__(self, outdir):
        self.outdir = outdir
        self.sty = "%%\n%% This is file `minted.sty\',\n%% generated with the docstrip utility.\n%%\n%% The original source files were:\n%%\n%% minted.dtx  (with options: `package\')\n%% Copyright 2010--2011 Konrad Rudolph\n%% \n%% This work may be distributed and/or modified under the\n%% conditions of the LaTeX Project Public License, either version 1.3\n%% of this license or (at your option) any later version.\n%% The latest version of this license is in\n%%   http://www.latex-project.org/lppl.txt\n%% and version 1.3 or later is part of all distributions of LaTeX\n%% version 2005/12/01 or later.\n%% \n%% Additionally, the project may be distributed under the terms of the new BSD\n%% license.\n%% \n%% This work has the LPPL maintenance status `maintained\'.\n%% \n%% The Current Maintainer of this work is Konrad Rudolph.\n%% \n%% This work consists of the files minted.dtx and minted.ins\n%% and the derived file minted.sty.\n\\NeedsTeXFormat{LaTeX2e}\n\\ProvidesPackage{minted}[2011/09/17 v1.7 Yet another Pygments shim for LaTeX]\n\\RequirePackage{keyval}\n\\RequirePackage{fancyvrb}\n\\RequirePackage{xcolor}\n\\RequirePackage{float}\n\\RequirePackage{ifthen}\n\\RequirePackage{calc}\n\\RequirePackage{ifplatform}\n\\DeclareOption{chapter}{\\def\\minted@float@within{chapter}}\n\\DeclareOption{section}{\\def\\minted@float@within{section}}\n\\ProcessOptions\\relax\n\\ifwindows\n  \\providecommand\\DeleteFile[1]{\\immediate\\write18{del #1}}\n\\else\n  \\providecommand\\DeleteFile[1]{\\immediate\\write18{rm #1}}\n\\fi\n\\newboolean{AppExists}\n\\newcommand\\TestAppExists[1]{\n  \\ifwindows\n    \\DeleteFile{\\jobname.aex}\n    \\immediate\\write18{for \\string^\\@percentchar i in (#1.exe #1.bat #1.cmd)\n      do set >\\jobname.aex <nul: /p x=\\string^\\@percentchar \\string~$PATH:i>>\\jobname.aex} %$\n    \\newread\\@appexistsfile\n    \\immediate\\openin\\@appexistsfile\\jobname.aex\n    \\expandafter\\def\\expandafter\\@tmp@cr\\expandafter{\\the\\endlinechar}\n    \\endlinechar=-1\\relax\n    \\readline\\@appexistsfile to \\@apppathifexists\n    \\endlinechar=\\@tmp@cr\n    \\ifthenelse{\\equal{\\@apppathifexists}{}}\n     {\\AppExistsfalse}\n     {\\AppExiststrue}\n    \\immediate\\closein\\@appexistsfile\n    \\DeleteFile{\\jobname.aex}\n\\immediate\\typeout{file deleted}\n  \\else\n    \\immediate\\write18{which #1 && touch \\jobname.aex}\n    \\IfFileExists{\\jobname.aex}\n     {\\AppExiststrue\n      \\DeleteFile{\\jobname.aex}}\n     {\\AppExistsfalse}\n  \\fi}\n\\newcommand\\minted@resetoptions{}\n\\newcommand\\minted@defopt[1]{\n  \\expandafter\\def\\expandafter\\minted@resetoptions\\expandafter{%\n    \\minted@resetoptions\n    \\@namedef{minted@opt@#1}{}}}\n\\newcommand\\minted@opt[1]{\n  \\expandafter\\detokenize%\n    \\expandafter\\expandafter\\expandafter{\\csname minted@opt@#1\\endcsname}}\n\\newcommand\\minted@define@opt[3][]{\n  \\minted@defopt{#2}\n  \\ifthenelse{\\equal{#1}{}}{\n    \\define@key{minted@opt}{#2}{\\@namedef{minted@opt@#2}{#3}}}\n   {\\define@key{minted@opt}{#2}[#1]{\\@namedef{minted@opt@#2}{#3}}}}\n\\newcommand\\minted@define@switch[3][]{\n  \\minted@defopt{#2}\n  \\define@booleankey{minted@opt}{#2}\n   {\\@namedef{minted@opt@#2}{#3}}\n   {\\@namedef{minted@opt@#2}{#1}}}\n\\minted@defopt{extra}\n\\newcommand\\minted@define@extra[1]{\n  \\define@key{minted@opt}{#1}{\n    \\expandafter\\def\\expandafter\\minted@opt@extra\\expandafter{%\n      \\minted@opt@extra,#1=##1}}}\n\\newcommand\\minted@define@extra@switch[1]{\n  \\define@booleankey{minted@opt}{#1}\n   {\\expandafter\\def\\expandafter\\minted@opt@extra\\expandafter{%\n      \\minted@opt@extra,#1}}\n   {\\expandafter\\def\\expandafter\\minted@opt@extra\\expandafter{%\n      \\minted@opt@extra,#1=false}}}\n\\minted@define@switch{texcl}{-P texcomments}\n\\minted@define@switch{mathescape}{-P mathescape}\n\\minted@define@switch{linenos}{-P linenos}\n\\minted@define@switch{startinline}{-P startinline}\n\\minted@define@switch[-P funcnamehighlighting=False]%\n  {funcnamehighlighting}{-P funcnamehighlighting}\n\\minted@define@opt{gobble}{-F gobble:n=#1}\n\\minted@define@opt{bgcolor}{#1}\n\\minted@define@extra{frame}\n\\minted@define@extra{framesep}\n\\minted@define@extra{framerule}\n\\minted@define@extra{rulecolor}\n\\minted@define@extra{numbersep}\n\\minted@define@extra{firstnumber}\n\\minted@define@extra{stepnumber}\n\\minted@define@extra{firstline}\n\\minted@define@extra{lastline}\n\\minted@define@extra{baselinestretch}\n\\minted@define@extra{xleftmargin}\n\\minted@define@extra{xrightmargin}\n\\minted@define@extra{fillcolor}\n\\minted@define@extra{tabsize}\n\\minted@define@extra{fontfamily}\n\\minted@define@extra{fontsize}\n\\minted@define@extra{fontshape}\n\\minted@define@extra{fontseries}\n\\minted@define@extra{formatcom}\n\\minted@define@extra{label}\n\\minted@define@extra@switch{numberblanklines}\n\\minted@define@extra@switch{showspaces}\n\\minted@define@extra@switch{resetmargins}\n\\minted@define@extra@switch{samepage}\n\\minted@define@extra@switch{showtabs}\n\\minted@define@extra@switch{obeytabs}\n\\newsavebox{\\minted@bgbox}\n\\newenvironment{minted@colorbg}[1]{\n  \\def\\minted@bgcol{#1}\n  \\noindent\n  \\begin{lrbox}{\\minted@bgbox}\n  \\begin{minipage}{\\linewidth-2\\fboxsep}}\n {\\end{minipage}\n  \\end{lrbox}%\n  \\colorbox{\\minted@bgcol}{\\usebox{\\minted@bgbox}}}\n\\newwrite\\minted@code\n\\newcommand\\minted@savecode[1]{\n  \\immediate\\openout\\minted@code\\jobname.pyg\n  \\immediate\\write\\minted@code{#1}\n  \\immediate\\closeout\\minted@code}\n\\newcommand\\minted@pygmentize[2][\\jobname.pyg]{\n  \\def\\minted@cmd{" + os.path.join(self.outdir, 'pygmentize') + " -l #2 -f latex -F tokenmerge\n    \\minted@opt{gobble} \\minted@opt{texcl} \\minted@opt{mathescape}\n    \\minted@opt{startinline} \\minted@opt{funcnamehighlighting}\n    \\minted@opt{linenos} -P \"verboptions=\\minted@opt{extra}\"\n    -o \\jobname.out.pyg #1}\n  \\immediate\\write18{\\minted@cmd}\n  % For debugging, uncomment:\n  %\\immediate\\typeout{\\minted@cmd}\n  \\ifthenelse{\\equal{\\minted@opt@bgcolor}{}}\n   {}\n   {\\begin{minted@colorbg}{\\minted@opt@bgcolor}}\n  \\input{\\jobname.out.pyg}\n  \\ifthenelse{\\equal{\\minted@opt@bgcolor}{}}\n   {}\n   {\\end{minted@colorbg}}\n  \\DeleteFile{\\jobname.out.pyg}}\n\\newcommand\\minted@usedefaultstyle{\\usemintedstyle{default}}\n\\newcommand\\usemintedstyle[1]{\n  \\renewcommand\\minted@usedefaultstyle{}\n  \\immediate\\write18{pygmentize -S #1 -f latex > \\jobname.pyg}\n  \\input{\\jobname.pyg}}\n\\newcommand\\mint[3][]{\n  \\DefineShortVerb{#3}\n  \\minted@resetoptions\n  \\setkeys{minted@opt}{#1}\n  \\SaveVerb[aftersave={\n    \\UndefineShortVerb{#3}\n    \\minted@savecode{\\FV@SV@minted@verb}\n    \\minted@pygmentize{#2}\n    \\DeleteFile{\\jobname.pyg}}]{minted@verb}#3}\n\\newcommand\\minted@proglang[1]{}\n\\newenvironment{minted}[2][]\n {\\VerbatimEnvironment\n  \\renewcommand{\\minted@proglang}[1]{#2}\n  \\minted@resetoptions\n  \\setkeys{minted@opt}{#1}\n  \\begin{VerbatimOut}[codes={\\catcode`\\^^I=12}]{\\jobname.pyg}}%\n {\\end{VerbatimOut}\n  \\minted@pygmentize{\\minted@proglang{}}\n  \\DeleteFile{\\jobname.pyg}}\n\\newcommand\\inputminted[3][]{\n  \\minted@resetoptions\n  \\setkeys{minted@opt}{#1}\n  \\minted@pygmentize[#3]{#2}}\n\\newcommand\\newminted[3][]{\n  \\ifthenelse{\\equal{#1}{}}\n   {\\def\\minted@envname{#2code}}\n   {\\def\\minted@envname{#1}}\n  \\newenvironment{\\minted@envname}\n   {\\VerbatimEnvironment\\begin{minted}[#3]{#2}}\n   {\\end{minted}}\n  \\newenvironment{\\minted@envname *}[1]\n   {\\VerbatimEnvironment\\begin{minted}[#3,##1]{#2}}\n   {\\end{minted}}}\n\\newcommand\\newmint[3][]{\n  \\ifthenelse{\\equal{#1}{}}\n   {\\def\\minted@shortname{#2}}\n   {\\def\\minted@shortname{#1}}\n  \\expandafter\\newcommand\\csname\\minted@shortname\\endcsname[2][]{\n    \\mint[#3,##1]{#2}##2}}\n\\newcommand\\newmintedfile[3][]{\n  \\ifthenelse{\\equal{#1}{}}\n   {\\def\\minted@shortname{#2file}}\n   {\\def\\minted@shortname{#1}}\n  \\expandafter\\newcommand\\csname\\minted@shortname\\endcsname[2][]{\n    \\inputminted[#3,##1]{#2}{##2}}}\n\\@ifundefined{minted@float@within}\n {\\newfloat{listing}{h}{lol}}\n {\\newfloat{listing}{h}{lol}[\\minted@float@within]}\n\\newcommand\\listingscaption{Listing}\n\\floatname{listing}{\\listingscaption}\n\\newcommand\\listoflistingscaption{List of listings}\n\\providecommand\\listoflistings{\\listof{listing}{\\listoflistingscaption}}\n\\AtBeginDocument{\n  \\minted@usedefaultstyle}\n\\AtEndOfPackage{\n  \\ifnum\\pdf@shellescape=1\\relax\\else\n    \\PackageError{minted}\n     {You must invoke LaTeX with the\n      -shell-escape flag}\n     {Pass the -shell-escape flag to LaTeX. Refer to the minted.sty\n      documentation for more information.}\\fi\n  \\TestAppExists{pygmentize}\n  \\ifAppExists\\else\n    \\PackageError{minted}\n     {You must have `pygmentize\' installed\n      to use this package}\n     {Refer to the installation instructions in the minted\n      documentation for more information.}\n  \\fi}\n\\endinput\n%%\n%% End of file `minted.sty\'.\n"
        self.pygmentize = '''#!/bin/bash\n\n# An ugly hack to speed up pdflatex using the minted package place this file\n# with the name \'pygmentize\' somewhere on your path before the \'real\'\n# pygmentize, such that this file gets executed and can act as a wrapper around\n# the \'real\' pygmentize.  This script computes a hash-value (md5sum) of the\n# input file from minted and caches the output of pygmentize.  The cached files\n# are stored in a .minted/ directory next to the TeX doc.\n\nreal_pygmentize=`which pygmentize`\n\n# find the output file used by minted\ntake_outfile=0\nfor arg in $@\ndo\n  if [ $take_outfile -eq 1 ]\n  then\n    outfile=$arg\n    take_outfile=0\n  fi\n  if [ $arg = -o ]\n  then\n    take_outfile=1\n  fi\ndone\n\n# the last parameter is the input file\ninfile=${@: -1}\n\n# Create the .minted/ directory, if it doesn\'t exist.\nminted_cache=".minted_cache"\nif [[ ! -d ${minted_cache} ]]; then\n    mkdir ${minted_cache}\nfi\n\n# compute the hash value of the input\nhash="${minted_cache}/$( md5sum ${infile} | cut -d\' \' -f1 )"\nif [[ -f ${hash} ]]; then\n  # we have cached output from pygmentize\n  cp ${hash} ${outfile}\nelse\n  # call \'real\' pygmentize and cache the result\n  $real_pygmentize "$@"\n  cp ${outfile} ${hash}\nfi\n'''
    def put(self):
        with open(os.path.join(self.outdir, 'minted.sty'), 'w') as f:
            f.write(self.sty)
        with open(os.path.join(self.outdir, 'pygmentize'), 'w') as f:
            f.write(self.pygmentize)
        os.system('chmod +x {0}'.format(os.path.join(self.outdir, 'pygmentize')))
        return
