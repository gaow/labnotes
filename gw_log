#!/usr/bin/env python
import argparse, sys, os, re
from subprocess import PIPE, Popen
import tempfile
from gwlog2tex import LogToTex
from minted import minted
def getCompilerArguments(parser):
	parser.add_argument('filename',
                        metavar = 'FN',
                        nargs = '+',
                        help='''Name of the input log file(s).
                        This will create a new file [FN.pdf] under the current directory
                        (or [FN1-FN2-...-FNX.pdf] if there are multiple files).''')
	parser.add_argument('-a', '--author',
                        action='store',
                        default = '',
                        help='''Author's name of the document''')
	parser.add_argument('-t', '--title',
                        action='store',
                        default = '',
                        help='''Title of document''')
	parser.add_argument('-c', '--notoc',
                        action='store_true',
                        default = '',
                        help='''Do not generate table of contents''')

def pdflatex(fname, text):
	tmp_dir = None
	pattern = re.compile(r'gw_log_cache_*(.*)')
	for fn in os.listdir(tempfile.gettempdir()):
		if pattern.match(fn):
			tmp_dir = os.path.join(tempfile.gettempdir(), fn)
			break
	if not tmp_dir:
		tmp_dir = tempfile.mkdtemp(prefix='gw_log_cache_')
	dest_dir = os.getcwd()
	os.chdir(tmp_dir)
	# write tex file
	with open(fname + '.tex', 'w') as f:
		f.writelines(text)
	# write sty file
	m = minted(tmp_dir)
	m.put()
	sys.stderr.write('Building document "{0}" ...\n'.format(fname + '.pdf'))
	# too bad we cannot pipe tex to pdflatex with the output behavior under ctrl ... have to write the disk
	tc = Popen(["pdflatex", "-shell-escape", "-halt-on-error", "-file-line-error", fname + '.tex'],
		stdin = PIPE, stdout = PIPE, stderr = PIPE)
	out, error = tc.communicate()
	if (tc.returncode) or (not os.path.exists(fname + '.pdf')):
		sys.exit('ERROR: pdflatex is not happy. Compilation aborted.\nPlease manually execute the following commands to see what is going on:\n\t$ cd {0}\n\t$ pdflatex -shell-escape -halt-on-error -file-line-error {1}\n'.format(tmp_dir, fname + '.tex'))
	os.system("pdflatex -shell-escape -halt-on-error -file-line-error {0} > /dev/null".format(fname + '.tex'))
	os.system('mv {0} {1}'.format(fname + '.pdf', dest_dir))
	sys.stderr.write('Done!\n')
	return

def lite(args):
	fname = '-'.join([os.path.splitext(name)[0] for name in args.filename]) + '.' + 'lite'
	tex = LogToTex(args.title, args.author, args.notoc, args.filename)
	pdflatex(fname, tex.get(1))
	return

def full(args):
	fname = '-'.join([os.path.splitext(name)[0] for name in args.filename]) + '.' + 'full'
	tex = LogToTex(args.title, args.author, args.notoc, args.filename)
	pdflatex(fname, tex.get(0))
	return

if __name__ == '__main__':
	master_parser = argparse.ArgumentParser(
        description = '''Compile formatted log notes into pdf file''',
        prog = 'gw_log',
        fromfile_prefix_chars = '@',
        epilog = '''gw_log, motivated by documenting the workflow for the ESP6900 data analysis.
	Contact: Gao Wang <gaow@bcm.edu>''')
	master_parser.add_argument('--version', action='version', version='%(prog)s 1.0alpha')
	subparsers = master_parser.add_subparsers()
	# compile a project log file
	parser = subparsers.add_parser('lite', help='Generate main text from log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=lite)
	# compile a project log file
	parser = subparsers.add_parser('full', help='Generate main text + comments from log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=full)
	# getting args
	args = master_parser.parse_args()
	# calling the associated functions
	args.func(args)
