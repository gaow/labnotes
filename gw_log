#!/usr/bin/env python
import argparse, sys, os, re
from subprocess import PIPE, Popen
import tempfile
from gwlog2tex import LogToTex
from minted import minted
def getCompilerArguments(parser):
	parser.add_argument('filename',
                        metavar = 'FN',
                        nargs = '+',
                        help='''name of the input log file(s)''')
	parser.add_argument('-a', '--author',
                        action='store',
                        default = '',
                        help='''author's name of the document''')
	parser.add_argument('-t', '--title',
                        action='store',
                        default = '',
                        help='''title of document''')
	parser.add_argument('-c', '--notoc',
                        action='store_true',
                        default = '',
                        help='''do not generate table of contents''')
	parser.add_argument('-o', '--output',
			metavar='name',
                        type=str,
                        help='''name of output pdf file''')
	parser.add_argument('-v', '--vanilla',
                        action='store_true',
                        default = '',
                        help='''remove problematic cache files and start the program afresh''')

def pdflatex(fname, text, vanilla=False):
	tmp_dir = None
	pattern = re.compile(r'gw_log_cache_*(.*)')
	for fn in os.listdir(tempfile.gettempdir()):
		if pattern.match(fn):
			tmp_dir = os.path.join(tempfile.gettempdir(), fn)
			break
	if tmp_dir and vanilla:
		os.system('rm -rf {0}'.format(tmp_dir))
		sys.stderr.write('INFO: cache folder {0} is removed\n'.format(tmp_dir))
		tmp_dir = tempfile.mkdtemp(prefix='gw_log_cache_')
	if not tmp_dir:
		tmp_dir = tempfile.mkdtemp(prefix='gw_log_cache_')
	dest_dir = os.getcwd()
	os.chdir(tmp_dir)
	# write tex file
	with open(fname + '.tex', 'w') as f:
		f.writelines(text)
	# write sty file
	m = minted(tmp_dir)
	m.put()
	sys.stderr.write('Building document "{0}" ...\n'.format(fname + '.pdf'))
	for iter in [1,2]:
		# too bad we cannot pipe tex to pdflatex with the output behavior under ctrl ... have to write the disk
		tc = Popen(["pdflatex", "-shell-escape", "-halt-on-error", "-file-line-error", fname + '.tex'],
			stdin = PIPE, stdout = PIPE, stderr = PIPE)
		out, error = tc.communicate()
		if (tc.returncode) or error.decode(sys.getdefaultencoding()) or (not os.path.exists(fname + '.pdf')):
			with open(os.path.join(dest_dir, '{0}-ERROR.txt'.format(fname)), 'w') as f:
				f.writelines(out.decode(sys.getdefaultencoding()) + error.decode(sys.getdefaultencoding()))
			#sys.stderr.write('DEBUG:\n\t$ cd {0}\n\t$ pdflatex -shell-escape -halt-on-error -file-line-error {1}\n'.format(tmp_dir, fname + '.tex'))
			sys.stderr.write('ERROR: pdflatex is not happy. Compilation aborted. This incidence is most likely due to an internal bug.\n')
			sys.exit('Please find file "{0}-ERROR.txt" and report it to Gao Wang.\n'.format(fname))
		if iter == 1:
			sys.stderr.write('Still working ...\n')
			os.system('rm -f *.pdf')
		else:
			os.system('mv -f {0} {1}'.format(fname + '.pdf', dest_dir))
			os.system('rm -f *.out *.toc *.aux *.log')
	sys.stderr.write('Done!\n')
	return

def lite(args):
	if not args.output:
		fname = '-'.join([os.path.splitext(name)[0] for name in args.filename]) + '.' + 'lite'
	else:
		fname = args.output
	if fname.endswith('.pdf'):
		fname = fname.replace('.pdf', '')
	tex = LogToTex(args.title, args.author, args.notoc, args.filename)
	pdflatex(fname, tex.get(1), vanilla=args.vanilla)
	return

def full(args):
	if not args.output:
		fname = '-'.join([os.path.splitext(name)[0] for name in args.filename]) + '.' + 'full'
	else:
		fname = args.output
	if fname.endswith('.pdf'):
		fname = fname.replace('.pdf', '')
	tex = LogToTex(args.title, args.author, args.notoc, args.filename)
	pdflatex(fname, tex.get(0), vanilla=args.vanilla)
	return

if __name__ == '__main__':
	master_parser = argparse.ArgumentParser(
        description = '''Compile formatted log notes into pdf file''',
        prog = 'gw_log',
        fromfile_prefix_chars = '@',
        epilog = '''gw_log, motivated by documenting the workflow for the ESP6900 data analysis.
	Contact: Gao Wang <gaow@bcm.edu>''')
	master_parser.add_argument('--version', action='version', version='%(prog)s 1.0alpha')
	subparsers = master_parser.add_subparsers()
	# compile a project log file
	parser = subparsers.add_parser('lite', help='Generate main text from log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=lite)
	# compile a project log file
	parser = subparsers.add_parser('full', help='Generate main text + comments from log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=full)
	# getting args
	args = master_parser.parse_args()
	# calling the associated functions
	args.func(args)
