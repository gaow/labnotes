#!/usr/bin/env python
import argparse, sys, os
#from gwlog2tex import LogToTex
def getCompilerArguments(parser):
	parser.add_argument('filename',
                        metavar = 'FN',
                        nargs = '*',
                        help='''Name of the input log file(s).
                        This will create a new file [FN.pdf] under the current directory
                        (or [FN1-FN2-...-FNX.pdf] if there are multiple files).''')
	parser.add_argument('-a', '--author',
                        action='store',
                        default = None,
                        help='''Author's name of the pdf document''')
	parser.add_argument('-t', '--title',
                        action='store',
                        default = None,
                        help='''Document title.''')

def harvest(args):
	for idx, name in enumerate(args.filename):
		args.filename[idx] = os.path.splitext(name)[0]
	return

def recycle(args):
	for idx, name in enumerate(args.filename):
		args.filename[idx] = os.path.splitext(name)[0] + '.comments'
	return

if __name__ == '__main__':
	master_parser = argparse.ArgumentParser(
        description = '''Compile formatted log notes into pdf file''',
        prog = 'gw_log',
        fromfile_prefix_chars = '@',
        epilog = '''gw_log, motivated by documenting the workflow for the ESP6900 data analysis.
	Contact: Gao Wang <gaow@bcm.edu>''')
	master_parser.add_argument('--version', action='version', version='%(prog)s 1.0alpha')
	subparsers = master_parser.add_subparsers()
	# compile a project log file
	parser = subparsers.add_parser('harvest', help='Compile pdf file from project log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=harvest)
	# compile a project log file
	parser = subparsers.add_parser('recycle', help='Compile pdf file from project log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=harvest)
	# getting args
	args = master_parser.parse_args()
	# calling the associated functions
	args.func(args)
