#!/usr/bin/env python
import argparse, sys, os
from subprocess import Popen, PIPE, call
from gwlog2tex import LogToTex
from minted import wrtminted, MINTED
def getCompilerArguments(parser):
	parser.add_argument('filename',
                        metavar = 'FN',
                        nargs = '+',
                        help='''Name of the input log file(s).
                        This will create a new file [FN.pdf] under the current directory
                        (or [FN1-FN2-...-FNX.pdf] if there are multiple files).''')
	parser.add_argument('-a', '--author',
                        action='store',
                        default = None,
                        help='''Author's name of the pdf document''')
	parser.add_argument('-t', '--title',
                        action='store',
                        default = None,
                        help='''Document title.''')

def pdflatex(fname, text):
    with open(fname+'.tex', 'w') as f:
        f.writelines(text)
    wrtminted(MINTED)
    call(["pdflatex", "-shell-escape", fname+'.tex'])
    #if (tc.returncode):
    #    sys.exit("ERROR: pdflatex returned non-zero exit code. Please manually compile {0}.tex to troubleshoot".format(fname))
    call(["pdflatex", "-shell-escape", fname+'.tex'])
    for ext in ['aux', 'log', 'out', 'pyg']:
        try:
            call(['rm', '-f', fname + '.' + ext])
        except:
            pass
    call(['rm', '-f', 'minted.sty'])
    return

def lite(args):
    fname = '-'.join([os.path.splitext(name)[0] for name in args.filename]) + '.' + 'lite'
    tex = LogToTex(args)
    pdflatex(fname, tex.get(1))
    return

def full(args):
    fname = '-'.join([os.path.splitext(name)[0] for name in args.filename]) + '.' + 'full'
    tex = LogToTex(args)
    pdflatex(fname, tex.get(0))
    return

if __name__ == '__main__':
	master_parser = argparse.ArgumentParser(
        description = '''Compile formatted log notes into pdf file''',
        prog = 'gw_log',
        fromfile_prefix_chars = '@',
        epilog = '''gw_log, motivated by documenting the workflow for the ESP6900 data analysis.
	Contact: Gao Wang <gaow@bcm.edu>''')
	master_parser.add_argument('--version', action='version', version='%(prog)s 1.0alpha')
	subparsers = master_parser.add_subparsers()
	# compile a project log file
	parser = subparsers.add_parser('lite', help='Generate main text from log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=lite)
	# compile a project log file
	parser = subparsers.add_parser('full', help='Generate main text + comments from log file(s)')
	getCompilerArguments(parser)
	parser.set_defaults(func=full)
	# getting args
	args = master_parser.parse_args()
	# calling the associated functions
	args.func(args)
