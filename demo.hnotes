###
#!KBAC statistic implementation
###
###
#Methodology
###
#This program implements the KBAC statistic in [Liu and Leal 2010|@http://www.plosgenetics.org/article/info%3Adoi%2F10.1371%2Fjournal.pgen.1001156@]. It carries out case-control association testing for rare variants for whole exome association studies. Briefly, consider a gene of length "n" which harbors "m" rare variants. Genotype on the "m" variant sites & the disease status (case/control) are known for each individual. The program takes as input the m-site genotype and disease status (case/control) data files, and computes a "p-value" indicating the significance of association. In order to speed up permutation testing we use an ``adaptive'' approach to obtain p-values.
#! Caution
#In the current implementation
#{list
#Only single candidate region analysis is supported;
#Genotype consists only of the rare variants of interest -- synonymous, non-polymophic sites and common variants (MAF > 0.01) must be excluded;
#Variant sites must be SNPs (two alleles each, no missing data).
#}

#!Input
#Although the method is designed for whole exome analysis, this stand-alone implementation does not allow exome-wide scan (and to make this possible we are working on integrating the method into PLINKSEQ; or similar to our simple R version, you may re-use the source code to adapt for your own data projects, under the GNU General Public License). There are two types of valid input
#!! the rest are omitted

###
#Program options
###
#{table
Flag	Default	Description
--help	-	List options
-f	phengen.dat	Input file
--ref	phengen_ref.dat	SNPs information supporting file. Note: this is applicable for the "2 files" input format. For the other input format we need to specify this switch as '--ref null'
-h	true	the first row of the input file is header (column names)
-p	2000	number of permutations for p-value calculation
-a	0.05	size of test, or the significant level. This feature will be useful in adaptive p-value calculation. If you do not want to use adaptive p-value, set '-a 999' (or any number greater than 1.0)
-w	true	Verbose. If '-w false', the screen output would contain a summary of the KBAC test; otherwise only the p-value will be printed on screen
#}

###
#Contact
###
#Please contact @wangow [at] gmail [dot] com@ for comments/questions.
###
# Keyword test
###

\ $ { }  % -- - & < > ~ ^ #
#{out
min@matthiola:~/Dropbox/Programs/labnotes$ python3 setup.py install --prefix=~/local
running install
running build
running build_py
copying gwlog/gwlog2html.py -> build/lib/gwlog
Skipping implicit fixer: buffer
Skipping implicit fixer: idioms
Skipping implicit fixer: set_literal
Skipping implicit fixer: ws_comma
running build_scripts
running install_lib
copying build/lib/gwlog/gwlog2html.py -> /home/min/local/lib/python3.2/site-packages/gwlog
byte-compiling /home/min/local/lib/python3.2/site-packages/gwlog/gwlog2html.py to gwlog2html.cpython-32.pyc
running install_scripts
changing mode of /home/min/local/bin/gw_log to 755
running install_egg_info
Removing /home/min/local/lib/python3.2/site-packages/gw_log-1.0-py3.2.egg-info
Writing /home/min/local/lib/python3.2/site-packages/gw_log-1.0-py3.2.egg-info
#}
./kbac -f phengen_recode.dat --ref null 
R --no-save phengen_recode.dat < cmc.R 
#{bash
unzip kbac-101201.zip
cd kbac-101201
make clean
make all
./kbac --help 
#}
#{r
> install.packages("Rcpp") 
> install.packages("inline") 
> source("kbacRcpp.r") 
> KbacTest 
function (ccdat, alpha, nperm) {
ysexp <- ccdat[,1]
xmat <- ccdat[,-1]
xsexp <- matrix(t(xmat), nrow = 1)
colsexp <- ncol(xmat)
rowsexp <- nrow(xmat)
npermsexp <- nperm
alphasexp <- alpha
pvalue <- KbacFct(npermsexp, xsexp, colsexp, rowsexp, ysexp, alphasexp)
return(pvalue)
}
#}
#The demo reads below:
#{r
casectrl.dat <-read.table("phengen_recode.dat", skip = 1) 
### 
# Set parameters and use the KbacTest() function to obtain p-value 
### 
alpha <- 0.05 
num.permutation <- 2000 
kbac.pvalue <- KbacTest(casectrl.dat, alpha, num.permutation) 
print(kbac.pvalue) 
### 
# To evaluate test at small alpha we need huge number of permutations. Adaptive approach is thus necessary. 
### 
kbac.pvalue <- KbacTest(casectrl.dat, 0.00001, 20000000) 
print(kbac.pvalue) 
### 
# Not using adaptive p-value calculation; will take long time 
### 
kbac.pvalue <- KbacTest(casectrl.dat, 9, 20000000) 
print(kbac.pvalue) 
#}
./kbac -f phengen_recode.dat --ref null 
R --no-save phengen_recode.dat < cmc.R 
#{r
> install.packages("Rcpp") 
> install.packages("inline") 
> source("kbacRcpp.r") 
> KbacTest 
function (ccdat, alpha, nperm) {
ysexp <- ccdat[,1]
xmat <- ccdat[,-1]
xsexp <- matrix(t(xmat), nrow = 1)
colsexp <- ncol(xmat)
rowsexp <- nrow(xmat)
npermsexp <- nperm
alphasexp <- alpha
pvalue <- KbacFct(npermsexp, xsexp, colsexp, rowsexp, ysexp, alphasexp)
return(pvalue)
}
#}
#The demo reads below:
#{r
casectrl.dat <-read.table("phengen_recode.dat", skip = 1) 
### 
# Set parameters and use the KbacTest() function to obtain p-value 
### 
alpha <- 0.05 
num.permutation <- 2000 
kbac.pvalue <- KbacTest(casectrl.dat, alpha, num.permutation) 
print(kbac.pvalue) 
### 
# To evaluate test at small alpha we need huge number of permutations. Adaptive approach is thus necessary. 
### 
kbac.pvalue <- KbacTest(casectrl.dat, 0.00001, 20000000) 
print(kbac.pvalue) 
### 
# Not using adaptive p-value calculation; will take long time 
### 
kbac.pvalue <- KbacTest(casectrl.dat, 9, 20000000) 
print(kbac.pvalue) 
#}

###
# Boxes
###
#{ warning
# this is a warning block
#}
#{ note
# this is a note block
#}
#{ important
# this is an important block
#}
#{ tip
# this is a tip block
#}
#!!! this is a shadowed square

#!Figures
#* bcm.png 
# and smaller ...
#* bcm.png 0.5
